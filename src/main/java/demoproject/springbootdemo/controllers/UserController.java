package demoproject.springbootdemo.controllers;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import demoproject.springbootdemo.models.User;
import demoproject.springbootdemo.repositories.UserRepository;
import demoproject.springbootdemo.utils.JwtUtils;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /api (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtils jwtUtils;

    @PostMapping(path = "/users/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email,
            @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);

        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/users")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/users/{id}")
    public @ResponseBody Optional<User> getUser(@PathVariable("id") Integer id) {
        // This returns a JSON or XML with the user who has the requested id
        return userRepository.findById(id);
    }

    @DeleteMapping(path = "/users/delete/{id}")
    public @ResponseBody String deleteUser(@PathVariable("id") Integer id) {
        // This returns a JSON or XML with the users
        Optional<User> user = userRepository.findById(id);

        if (user.isPresent()) {
            userRepository.deleteById(id);
            return "Deleted user with id " + id;
        }

        return "Could not find user with id " + id;
    }

    @PatchMapping(path = "/users/update")
    public ResponseEntity<String> updateUser(@ModelAttribute User userToUpdate) {
        // This returns a JSON or XML with the users
        Optional<User> user = userRepository.findByEmail(userToUpdate.getEmail());

        if (user.isPresent()) {
            user.get().setName(userToUpdate.getName());
            user.get().setPassword(userToUpdate.getPassword());
            userRepository.save(user.get());
            return ResponseEntity.ok("Updated user with email " + userToUpdate.getEmail());
        }

        return ResponseEntity.status(404).body("Could not find user with email " + userToUpdate.getEmail());
    }

    @PatchMapping(path = "/users/update/{id}")
    public @ResponseBody String updateUser(@PathVariable("id") Integer id, @ModelAttribute User userToUpdate) {
        // This returns a JSON or XML with the users
        Optional<User> user = userRepository.findById(id);

        if (user.isPresent()) {
            user.get().setName(userToUpdate.getName());
            user.get().setPassword(userToUpdate.getPassword());
            userRepository.save(user.get());
            return "Updated user with id " + id;
        }

        return "Could not find user with id " + id;
    }

    @PostMapping(path = "/users/login")
    public ResponseEntity<String> login(@RequestParam String email, @RequestParam String password) {
        Optional<User> user = userRepository.findByEmail(email);
        if (!user.isPresent())
            return ResponseEntity.status(404).body("Couldn't find user");
        else if (!user.get().getPassword().equals(password))
            return ResponseEntity.status(500).body("Wrong password");

        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.set("token", jwtUtils.generateJwt(user.get()));

        return ResponseEntity.ok()
                .headers(responseHeaders)
                .body("Logged in successfully");
    }
}